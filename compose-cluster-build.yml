version: '3'
services:

  zookeeper: # https://github.com/wurstmeister/zookeeper-docker
    build: 
      context: .
      dockerfile: ./zookeper-dockerfile/Dockerfile
    container_name: zookeper
    networks:
      - kafka_net 
    ports:
      - "2181:2181"
      
  kafka: # https://github.com/wurstmeister/kafka-docker/wiki/Connectivity
    image: wurstmeister/kafka:latest
    container_name: kafka
    #build: ./kafka-Dockerfile
    #deploy:
    #  replicas: 3
    ports:
      - "9092:9092"
    networks:
      - kafka_net 
    #healthcheck:
      #test: ["CMD", "$KAFKA_HOME/bin/kafka-topics.sh --describe --zookeeper zookeeper:2181 | wc -l"]
      #interval: 1s
      #timeout: 3s
      #retries: 60
    environment:
      # KAFKA_ADVERTISED_HOST_NAME: 0.0.0.0
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      
  kafkamanager:
    image: kafkamanager/kafka-manager
    container_name: kafkamanager
    restart: on-failure
    # curl localhost:9000/clusters --data "name=fiap&zkHosts=0.0.0.0:2181&kafkaVersion=2.6.1" -X POST
    networks:
      - kafka_net     
    ports:
      - 9001:9000
    environment:
      - "ZK_HOSTS=zookeeper:2181"
    depends_on:
      - kafka

  kafdrop: # https://github.com/obsidiandynamics/kafdrop/blob/master/docker-compose/kafka-kafdrop/docker-compose.yaml
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
       - kafka
 
  producer:
    image: tonanuvem/producer_kafka:latest
    container_name: producer
    #network_mode: "host"
    networks:
      - kafka_net     
    ports:
      - 80:5001
      - 5001:5001
    command: bash -c 'apk add curl; while [[ "$$(curl --connect-timeout 2 -s -o /dev/null -w ''%{http_code}'' http://kafkamanager:9000)" != "200" ]]; do echo ..; sleep 5; done; echo backend is up;python /code/server.py'
    restart: on-failure
    environment:
      #- "HOST=0.0.0.0"
      - "HOST=kafka"
      - "PORTA=9092"
      - "TOPICO=meu-topico"
      - "SLACK=inserir-webhook"
      - "CANAL=lab-produtor"
    depends_on:
      - kafka
      - kafkamanager

  consumer:
    image: tonanuvem/consumer_kafka:latest
    container_name: consumer
    # network_mode: "host"
    networks:
      - kafka_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://producer:5001/"]
      interval: 1s
      timeout: 3s
      retries: 60
    command:
        - bash
        - -c
        - |
          apk add curl
          while [[ "$$(curl --connect-timeout 2 -s -o /dev/null -w ''%{http_code}'' http://producer:5001)" != "200" ]]; do 
            echo . 
            sleep 5
          done 
          echo backend is up
          cd /usr/src/app
          npm start
    restart: on-failure
    environment:
      #- "HOST=0.0.0.0"
      - "HOST=kafka"
      - "PORTA=9092"
      - "TOPICO=meu-topico"
      - "SLACK=inserir-webhook"
      - "CANAL=lab-consumidor"
    depends_on:
      - kafka
      - producer

networks:
  kafka_net:
  
# docker-compose down && git pull && docker-compose -f compose-cluster-build.yml up
